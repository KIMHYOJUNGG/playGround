<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/data/mongo
        http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="total.service"></context:component-scan>
	<context:component-scan base-package="total.controller"></context:component-scan>

	<!--view setting view처리시 타일즈이용해서 처리가능 InternalResourceViewResolver보다 먼저 
		설정해야 먼저 검출된다. -->
	<bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<property name="order" value="1"></property>
	</bean>
	<bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<array>
				<value>/WEB-INF/tiles/*-tiles.xml</value>
			</array>
		</property>
	</bean>

	<mvc:annotation-driven />
	<!-- 우선순위가 스프링이다. 스프링이 처리하고 그다음에 처리하지 못하는걸 아래로 넘김. -->
	<mvc:default-servlet-handler />
	<!--서버를 키면 web.xml에 defaultServletHandler가 았다. 디폴트가 처리하던걸 스프링이 처리하게되서 외부자원에 
		접근이 안된다. 처리하지못하는 요청은 디폴트서블릿에게 요청 그런데 나머지가 작동안함. 우선순위가 바뀜. -->

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2"></property>
	</bean>

	<!-- =================================s========================================================== -->
	<!-- 스프링에서 만든 데이터 소스 이걸가지고 마이바티스가 작동되독록 한다. -->
	<bean id="ds"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@13.125.137.154:1521:xe"></property>
		<property name="username" value="pg"></property>
		<property name="password" value="oracle"></property>
	</bean>

	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="factory">
		<!-- SqlSessionFactory자체는 인터페이스.SqlSessionFactoryBean는 구현을 해놓은것 데이터소스(스프링이 
			관리하는 데이터소스를 넘겨줘야지만 트랜잭션을 관리할수 잇다.)를 넘겨준다. -->
		<property name="dataSource" ref="ds" />
		<property name="mapperLocations"> <!--mapper의 위치를 설정 -->
			<list>
				<value>/WEB-INF/mappers/*-mapper.xml</value>
				<!-- <value>/WEB-INF/mapper/*-mapper.xml</value> -->
				<!--스프링에서는 자동으로 src경로를 안잡아 주기 때문에 classpath를 꼭 지정해야한다. 웹상에서의 위치 -->
			</list>
		</property>
	</bean>

	<!--SqlSessionTemplate opensessoin과 session.close()관리 이걸로 하는게 코드가 간결해진다. -->
	<bean id="sqlTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="factory" />
	</bean>


	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds"></property>
	</bean>
	<tx:advice id="tx" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" /><!--감지해야 되는 메소드 -->
		</tx:attributes>
	</tx:advice>
	<aop:config><!-- -->

		<aop:advisor advice-ref="tx" pointcut="within(total.service.*)" />
	</aop:config>
	<!-- =========================================================================================== -->

	<!-- gson 등록 -->
	<bean id="gsonBuilder" class="com.google.gson.GsonBuilder">
		<property name="dateFormat" value="yyyy/MM/dd HH:mm"></property>
	</bean>
	<bean id="gson" factory-bean="gsonBuilder" factory-method="create" />

	<!-- WebSocket 등록 -->
	<bean id="wsMap" class="total.domain.WebSocketMap" />
	<websocket:handlers>
		<websocket:mapping handler="WSController" path="/logonWS" />
		<websocket:handshake-interceptors>
			<!-- 웹소켓 연결 시도됐을 때 가로채서 작업하는 객체! httpSession에 담겨있던 값을 고대로 담아서 옮겨줌! 만약 
				세션에 logon을 add해놨다면 그 값까지도!!!! -->
			<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>
	</websocket:handlers>

	<mongo:mongo-client host="13.125.137.154" port="59119" id="mongo" />
	<mongo:db-factory dbname="playGround" mongo-ref="mongo" id="mongoFactory"/>
	<bean class="org.springframework.data.mongodb.core.MongoTemplate" id="mongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoFactory" />
	</bean>
	<!-- Mail Sender Setting -->
	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl" id="mailSender">
		<property name="host" value="smtp.gmail.com"></property><!-- host id or goole smtp -->
		<property name="username" value="everyonewelcome93@gmail.com"></property><!-- google id -->
		<property name="password" value="!1q2w3e4r"></property><!-- google password -->
		<property name="port" value="587"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="uploadTempDir" value="/temp"></property>
	</bean>
	
	
	
</beans>
